// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q          = new(Query)
	Article    *article
	ArticleTag *articleTag
	Tag        *tag
	User       *user
	UserInfo   *userInfo
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Article = &Q.Article
	ArticleTag = &Q.ArticleTag
	Tag = &Q.Tag
	User = &Q.User
	UserInfo = &Q.UserInfo
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:         db,
		Article:    newArticle(db, opts...),
		ArticleTag: newArticleTag(db, opts...),
		Tag:        newTag(db, opts...),
		User:       newUser(db, opts...),
		UserInfo:   newUserInfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Article    article
	ArticleTag articleTag
	Tag        tag
	User       user
	UserInfo   userInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Article:    q.Article.clone(db),
		ArticleTag: q.ArticleTag.clone(db),
		Tag:        q.Tag.clone(db),
		User:       q.User.clone(db),
		UserInfo:   q.UserInfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Article:    q.Article.replaceDB(db),
		ArticleTag: q.ArticleTag.replaceDB(db),
		Tag:        q.Tag.replaceDB(db),
		User:       q.User.replaceDB(db),
		UserInfo:   q.UserInfo.replaceDB(db),
	}
}

type queryCtx struct {
	Article    IArticleDo
	ArticleTag IArticleTagDo
	Tag        ITagDo
	User       IUserDo
	UserInfo   IUserInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Article:    q.Article.WithContext(ctx),
		ArticleTag: q.ArticleTag.WithContext(ctx),
		Tag:        q.Tag.WithContext(ctx),
		User:       q.User.WithContext(ctx),
		UserInfo:   q.UserInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
